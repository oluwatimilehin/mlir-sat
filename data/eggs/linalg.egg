_SSA_1 = SSALiteral.value("A", SSAType.memref(2, 2, "f64"))
Region(
    Vec[Block](
        Block(
            Vec[SSA].empty(),
            Vec[SSA](
                Func.func(
                    "distribute",
                    Vec[SSA](
                        _SSA_1,
                        SSALiteral.value("B", SSAType.memref(2, 2, "f64")),
                        SSALiteral.value("AB", SSAType.memref(2, 2, "f64")),
                        SSALiteral.value("C", SSAType.memref(2, 2, "f64")),
                        SSALiteral.value("AC", SSAType.memref(2, 2, "f64")),
                        SSALiteral.value("D", SSAType.memref(2, 2, "f64")),
                    ),
                    Vec[SSA](
                        Linalg.add(
                            Linalg.matmul(
                                _SSA_1,
                                SSALiteral.value("B", SSAType.memref(2, 2, "f64")),
                                SSALiteral.value("AB", SSAType.memref(2, 2, "f64")),
                                SSALiteral.value("", SSAType.none()),
                            ),
                            Linalg.matmul(
                                _SSA_1,
                                SSALiteral.value("C", SSAType.memref(2, 2, "f64")),
                                SSALiteral.value("AC", SSAType.memref(2, 2, "f64")),
                                SSALiteral.value("", SSAType.none()),
                            ),
                            SSALiteral.value("D", SSAType.memref(2, 2, "f64")),
                            SSALiteral.value("", SSAType.none()),
                        ),
                        Func.ret(Arith.constant(0, SSALiteral.value("c0", SSAType.integer(32))), SSAType.integer(32)),
                    ),
                    SSAType.integer(32),
                )
            ),
        )
    )
)